<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Services\PineconeService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;

/**
 * @OA\Info(
 *     version="1.0.0",
 *     title="Pinecone Scripture API",
 *     description="API para búsqueda de versículos bíblicos usando Pinecone",
 *     @OA\Contact(
 *         email="soporte@ejemplo.com"
 *     )
 * )
 * @OA\Server(
 *     url="http://localhost:8000",
 *     description="API Server"
 * )
 * @OA\Tag(
 *     name="Vectors",
 *     description="Operaciones con vectores"
 * )
 * @OA\Tag(
 *     name="Scriptures",
 *     description="Operaciones con referencias bíblicas"
 * )

class PineconeController extends Controller
{
    protected PineconeService $pineconeService;

    public function __construct(PineconeService $pineconeService)
    {
        $this->pineconeService = $pineconeService;
    }
    
    /**
     * @OA\Get(
     *     path="/api/pinecone/debug",
     *     tags={"Vectors"},
     *     summary="Obtener información de depuración del índice Pinecone",
     *     @OA\Response(
     *         response=200,
     *         description="Información de depuración del índice",
     *         @OA\JsonContent(
     *             @OA\Property(property="success", type="boolean", example=true),
     *             @OA\Property(property="data", type="object")
     *         )
     *     )
     * )
     * 
     * @return \Illuminate\Http\JsonResponse
     */
    public function debug()
    {
        try {
            $debugInfo = $this->pineconeService->getDebugInfo();
            
            return response()->json([
                'success' => true,
                'data' => $debugInfo
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ], 500);
        }
    }

    /**
     * @OA\Post(
     *     path="/api/pinecone/query",
     *     tags={"Vectors"},
     *     summary="Consultar el índice Pinecone con un vector",
     *     @OA\RequestBody(
     *         required=true,
     *         @OA\JsonContent(
     *             required={"vector"},
     *             @OA\Property(property="vector", type="array", @OA\Items(type="number")),
     *             @OA\Property(property="top_k", type="integer", example=5),
     *             @OA\Property(property="filter", type="object")
     *         )
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Resultados de la consulta",
     *         @OA\JsonContent(
     *             @OA\Property(property="success", type="boolean"),
     *             @OA\Property(property="data", type="object")
     *         )
     *     )
     * )
     */
    public function query(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'vector' => 'required|array',
            'vector.*' => 'numeric',
            'top_k' => 'sometimes|integer|min:1|max:100',
            'filter' => 'sometimes|array',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            $result = $this->pineconeService->query(
                $request->input('vector'),
                $request->input('top_k', 5),
                $request->input('filter', [])
            );

            return response()->json([
                'success' => true,
                'data' => $result
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Upsert vectors to the index
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function upsert(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'vectors' => 'required|array',
            'vectors.*.id' => 'required|string',
            'vectors.*.values' => 'required|array',
            'vectors.*.values.*' => 'numeric',
            'vectors.*.metadata' => 'sometimes|array',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            $result = $this->pineconeService->upsertVectors($request->input('vectors'));
            
            return response()->json([
                'success' => true,
                'data' => $result
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Get vector by ID
     *
     * @param Request $request
     * @param string $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function getVector(Request $request, string $id)
    {
        try {
            $includeValues = $request->get('include_values', 'false') === 'true';
            $result = $this->pineconeService->getVector($id, $includeValues);
            
            return response()->json([
                'success' => true,
                'data' => $result
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Delete vectors by ID or filter
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    /**
     * @OA\Post(
     *     path="/api/pinecone/vector/reference",
     *     tags={"Scriptures"},
     *     summary="Obtener vector por referencia bíblica",
     *     @OA\Parameter(
     *         name="reference",
     *         in="query",
     *         required=true,
     *         description="Referencia bíblica (ej: 'Juan 3:16')",
     *         @OA\Schema(type="string")
     *     ),
     *     @OA\Parameter(
     *         name="include_values",
     *         in="query",
     *         required=false,
     *         description="Incluir valores del vector en la respuesta",
     *         @OA\Schema(type="boolean", default=false)
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Vector encontrado",
     *         @OA\JsonContent(
     *             @OA\Property(property="success", type="boolean", example=true),
     *             @OA\Property(property="data", type="object")
     *         )
     *     ),
     *     @OA\Response(
     *         response=422,
     *         description="Error de validación",
     *         @OA\JsonContent(
     *             @OA\Property(property="success", type="boolean", example=false),
     *             @OA\Property(property="message", type="string"),
     *             @OA\Property(property="errors", type="object")
     *         )
     *     )
     * )
     * 
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getVectorByReference(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'reference' => 'required|string',
            'include_values' => 'sometimes|boolean'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation error',
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            $reference = $request->input('reference');
            $includeValues = $request->boolean('include_values', false);
            
            $result = $this->pineconeService->getVectorByReference($reference, $includeValues);
            
            return response()->json([
                'success' => true,
                'data' => $result
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * @OA\Post(
     *     path="/api/pinecone/vector/passage",
     *     tags={"Scriptures"},
     *     summary="Obtener múltiples vectores por referencia de pasaje bíblico",
     *     description="Obtiene los vectores para un rango de versículos. Ejemplos: 'Juan 1:1-3', '1 Nefi 3:7-8', 'Juan 1:1-3,14-15,20'",
     *     @OA\Parameter(
     *         name="passage",
     *         in="query",
     *         required=true,
     *         description="Referencia bíblica (ej: 'Juan 1:1-3,14-15,20')",
     *         @OA\Schema(type="string")
     *     ),
     *     @OA\Response(
     *         response=200,
     *         description="Vectores encontrados",
     *         @OA\JsonContent(
     *             @OA\Property(property="success", type="boolean", example=true),
     *             @OA\Property(property="data", type="object",
     *                 @OA\Property(property="passage", type="string", example="Juan 1:1-3,14-15,20"),
     *                 @OA\Property(property="verse_count", type="integer", example=6),
     *                 @OA\Property(property="concatenated_text", type="string"),
     *                 @OA\Property(property="verses", type="array",
     *                     @OA\Items(type="object",
     *                         @OA\Property(property="reference", type="string"),
     *                         @OA\Property(property="vector_id", type="string"),
     *                         @OA\Property(property="text", type="string"),
     *                         @OA\Property(property="metadata", type="object")
     *                     )
     *                 ),
     *                 @OA\Property(property="errors", type="array", 
     *                     @OA\Items(type="object",
     *                         @OA\Property(property="reference", type="string"),
     *                         @OA\Property(property="error", type="string")
     *                     )
     *                 )
     *             )
     *         )
     *     ),
     *     @OA\Response(
     *         response=422,
     *         description="Error de validación",
     *         @OA\JsonContent(
     *             @OA\Property(property="success", type="boolean", example=false),
     *             @OA\Property(property="message", type="string"),
     *             @OA\Property(property="errors", type="object")
     *         )
     *     )
     * )
     * 
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getVectorsByPassage(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'passage' => 'required|string'
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Validation error',
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            $passage = $request->input('passage');
            $includeValues = false; // Always false by default
            
            $result = $this->pineconeService->getVectorsByPassage($passage, $includeValues);
            
            return response()->json([
                'success' => true,
                'data' => $result
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Delete vectors by ID or filter
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function delete(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'ids' => 'sometimes|array',
            'ids.*' => 'string',
            'filter' => 'sometimes|array',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'errors' => $validator->errors()
            ], 422);
        }

        try {
            $result = $this->pineconeService->deleteVectors(
                $request->input('ids', []),
                $request->input('filter', [])
            );
            
            return response()->json([
                'success' => true,
                'data' => $result
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => $e->getMessage()
            ], 500);
        }
    }
}
